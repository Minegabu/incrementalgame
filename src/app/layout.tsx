<<<<<<< HEAD
'use client'
import './globals.css'
import { Inter } from 'next/font/google'
import { useEffect, useState,createContext } from 'react';
import { useSelector, useDispatch, Provider } from 'react-redux'
import Link from 'next/link'
import { AppBar, Button, Container } from '@mui/material';
const inter = Inter({ subsets: ['latin'] })
import * as React from 'react';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import store from './redux2/store'
import { increment } from './redux2/counter';
=======
import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}
>>>>>>> af1a8920e62b0796d4cff8dd0af900432cc794d8

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
<<<<<<< HEAD
  const money = useSelector((state) => state.money);
  const dispatch = useDispatch();

  const [moneygen, setMoneygen] = useState<number>(() => {
    const storedMoneygen = window.localStorage.getItem('moneygen');
    return storedMoneygen ? parseFloat(storedMoneygen) : 0;
  });

  const timesmoney = parseFloat(window.localStorage.getItem('timesmoney') || '0');
  const [moneyPerSecond, setMoneyPerSecond] = useState<number>(() => {
    const storedMoneyPerSecond = window.localStorage.getItem('mps ');
    return storedMoneyPerSecond ? parseFloat(storedMoneyPerSecond) : 0;
  });

  useEffect(() => {
    window.localStorage.setItem('money', JSON.stringify(money));
  }, [money, timesmoney]);

  /*useEffect(() => {
    if (moneygen >= 1) {
      const timer = setInterval(() => {
        setMoney((prevMoney) => prevMoney + moneygen / 10 * timesmoney);
      }, 1000);

      return () => {
        clearInterval(timer);
      };
    }
  }, [moneygen]);
  /** */
  return (
    <html lang="en">
      <Provider store={store}><main/></Provider>
          <Container className={inter.className}>
            <div id="body">
            <div id="currmon">
              <Typography variant="h6">Current Money: {money.toFixed(1)}</Typography>
              <Typography variant="h6">({moneyPerSecond}/s)</Typography>
                <Button variant="contained" color="secondary" onClick={() => dispatch(increment())}>
                  Click for Money
                </Button>
            </div>
            <Box sx={{ flexGrow: 1 }}>
              <AppBar position="static" sx={{ color: 'white' }}>
                <Toolbar>
                  <Link href="/">Home</Link>
                  <Link href="/rank">Rank</Link>
                </Toolbar>
              </AppBar>
            </Box>
            <div id="children">
              {children}
            </div>
          </div>
        </Container>
    </html>
  );
}
=======
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
>>>>>>> af1a8920e62b0796d4cff8dd0af900432cc794d8
